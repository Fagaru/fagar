generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Corporation {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  userId          String?
  phone           String?
  mail_pro        String?
  description     String?
  siretNum        String?
  siren_num       String?
  codeNAF         String?
  linkFacebook    String?
  linkInstagram   String?
  linkLinkedIn    String?
  linkX           String?
  starting_date   DateTime?
  numEmplyees     String?
  addressId       String      @unique
  address         Address     @relation("CorporationToAddress", fields: [addressId], references: [id])
  categoryId      String      @db.ObjectId
  category        Category    @relation("CategoryToCorporation", fields: [categoryId], references: [id])
  tags            Tag[]       @relation("CorporationToTag")
  images          Image[]     @relation("CorporationToImage")
  schedules       Schedule[]  @relation("CorporationToSchedule")
  reviews         Review[]    @relation("CorporationToReview")
  subscription    SubscriptionItem?
  isActive        Boolean     @default(false)
  isSuspended     Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Category {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  label             String
  imageUrl          String
  corporations      Corporation[] @relation("CategoryToCorporation")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model City {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  label             String
  imageUrl          String?
  addresses         Address[]     @relation("CityToAddress")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Region {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  label             String
  imageUrl          String
  addresses         Address[]     @relation("RegionToAddress")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Image {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  url             String
  corporationId   String        @db.ObjectId
  corporation     Corporation   @relation("CorporationToImage", fields: [corporationId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Address {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  lat             String?
  lng             String?
  placeId         String?
  label           String?
  country         String?
  regionId        String        @db.ObjectId
  region          Region        @relation("RegionToAddress", fields: [regionId], references: [id])
  cityId          String        @db.ObjectId
  city            City          @relation("CityToAddress", fields: [cityId], references: [id])
  postCode        String
  streetName      String
  streetNum       String
  corporation     Corporation?  @relation("CorporationToAddress")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Schedule {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  dayWeek         String
  begin_am        DateTime?
  end_am          DateTime?
  begin_pm        DateTime?
  end_pm          DateTime?
  corporationId   String        @db.ObjectId
  corporation     Corporation   @relation("CorporationToSchedule", fields: [corporationId], references: [id])
  available       String        @default("closed")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Subscription {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  label           String
  description     String
  price           String
  items           SubscriptionItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SubscriptionItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  starting_date   DateTime
  closing_date    DateTime
  isPaid          Boolean       @default(false)
  isSuspended     Boolean       @default(false)
  isActive        Boolean       @default(false)
  subscriptionId  String        @db.ObjectId
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  corporationId   String        @unique @db.ObjectId
  corporation     Corporation   @relation(fields: [corporationId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Review {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?
  comment         String
  stars           String        // étoiles 1 à 5
  corporationId   String        @db.ObjectId
  corporation     Corporation   @relation("CorporationToReview", fields: [corporationId], references: [id])
}

model Tag {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  corporationId   String        @db.ObjectId
  corporation     Corporation   @relation("CorporationToTag", fields: [corporationId], references: [id])
}